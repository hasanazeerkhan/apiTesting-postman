{
	"info": {
		"_postman_id": "598d5071-1c7b-4bf0-b520-95b745eb4d66",
		"name": "Reqres API cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31406627",
		"_collection_link": "https://www.postman.com/hasanmohammed/workspace/myworkspace/collection/31406627-598d5071-1c7b-4bf0-b520-95b745eb4d66?action=share&source=collection_link&creator=31406627"
	},
	"item": [
		{
			"name": "List users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Test 1: Verify status code',async function(){\r",
							"    await pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('Test 2: Verify Status text', async function(){\r",
							"\tawait pm.response.to.have.status(\"OK\");\r",
							"})\r",
							"\r",
							"pm.test('Test 3: Verify Content type in header', async function(){\r",
							"\tawait pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('Test 4: Verify Response time', async function(){\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(2000)\r",
							"})\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"pm.test('Test 5: Verify type of response in Response body', async function () {\r",
							"    pm.expect(responseData).to.be.an(\"object\");\r",
							"})\r",
							"\r",
							"pm.test('Test 6: Verify Response body for search results)', async function(){\r",
							"    pm.expect(responseData.page).to.equal(2);\r",
							"    pm.expect(responseData.per_page).to.equal(6);\r",
							"    pm.expect(responseData.total).to.equal(12);\r",
							"    pm.expect(responseData.total_pages).to.equal(2);\r",
							"})\r",
							"\r",
							"pm.test('Test 7: Verify Response body the data in search results', async function(){\r",
							"    pm.expect(responseData.data[0].id).to.equal(7);\r",
							"    pm.expect(responseData.data[0].email).to.equal(\"michael.lawson@reqres.in\");\r",
							"    pm.expect(responseData.data[0].first_name).to.equal(\"Michael\");\r",
							"    pm.expect(responseData.data[0].last_name).to.equal(\"Lawson\");\r",
							"    pm.expect(responseData.data[0].avatar).to.equal(\"https://reqres.in/img/faces/7-image.jpg\");\r",
							"})\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"page\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"per_page\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"total\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"total_pages\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"data\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"id\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"email\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"first_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"last_name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"avatar\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"id\",\r",
							"            \"email\",\r",
							"            \"first_name\",\r",
							"            \"last_name\",\r",
							"            \"avatar\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"support\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"url\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"text\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"url\",\r",
							"        \"text\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"page\",\r",
							"    \"per_page\",\r",
							"    \"total\",\r",
							"    \"total_pages\",\r",
							"    \"data\",\r",
							"    \"support\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Test 8: Verify Response body schema', async function () {\r",
							"    pm.expect(responseData).to.have.jsonSchema(schema)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl_global}}/api/users?page=2",
					"host": [
						"{{baseUrl_global}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status test',async function(){\r",
							"    await pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test('Test 2: Status text', async function(){\r",
							"\tawait pm.response.to.have.status(\"Created\");\r",
							"})\r",
							"\r",
							"pm.test('Test 3: Content type in header', async function(){\r",
							"\tawait pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('Test 4: Response time', async function(){\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(2000)\r",
							"})\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"pm.test('Test 5: Response body (type of response)', async function () {\r",
							"    pm.expect(responseData).to.be.an(\"object\");\r",
							"    pm.expect(responseData.name).to.be.an(\"string\");\r",
							"    pm.expect(responseData.job).to.be.an(\"string\");\r",
							"    pm.expect(responseData.id).to.be.an(\"string\");\r",
							"    pm.expect(responseData.createdAt).to.be.an(\"string\");\r",
							"})\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"job\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"createdAt\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"job\",\r",
							"    \"id\",\r",
							"    \"createdAt\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Test 6: Verify Response body schema', async function () {\r",
							"    pm.expect(responseData).to.have.jsonSchema(schema)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl_global}}/api/users",
					"host": [
						"{{baseUrl_global}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status test',async function(){\r",
							"    await pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('Test 2: Status text', async function(){\r",
							"\tawait pm.response.to.have.status(\"OK\");\r",
							"})\r",
							"\r",
							"pm.test('Test 3: Content type in header', async function(){\r",
							"\tawait pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('Test 4: Response time', async function(){\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(2000)\r",
							"})\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"pm.test('Test 5: Response body (type of response)', async function () {\r",
							"    pm.expect(responseData).to.be.an(\"object\");\r",
							"    pm.expect(responseData.name).to.be.an(\"string\");\r",
							"    pm.expect(responseData.job).to.be.an(\"string\");\r",
							"    pm.expect(responseData.updatedAt).to.be.an(\"string\");\r",
							"})\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"job\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"updatedAt\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"job\",\r",
							"    \"updatedAt\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Test 6: Verify Response body schema', async function () {\r",
							"    pm.expect(responseData).to.have.jsonSchema(schema)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"Tester\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl_global}}/api/users/317",
					"host": [
						"{{baseUrl_global}}"
					],
					"path": [
						"api",
						"users",
						"317"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Test 1: Status code', async function (){\r",
							"    await pm.response.to.have.status(204)\r",
							"})\r",
							"\r",
							"pm.test('Test 2: Status text', async function(){\r",
							"\tawait pm.response.to.have.status(\"No Content\");\r",
							"})\r",
							"\r",
							"pm.test('Test 3: Response time', async function(){\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(2000)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl_global}}/api/users/317",
					"host": [
						"{{baseUrl_global}}"
					],
					"path": [
						"api",
						"users",
						"317"
					]
				}
			},
			"response": []
		}
	]
}